@model Mittagessen.Web.Models.EnrollmentModel
           
@{
    ViewBag.Title = "Mittagessen";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
    //Lunch enrollment view model
    var EnrollmentViewModel = function (lunchId, userEnrolled, numberOfPortions, numberOfEnrollments, rating) {
        this.lunchId = lunchId;
        this.userEnrolled = ko.observable(userEnrolled);
        this.numberOfPortions = ko.observable(numberOfPortions);
        this.numberOfEnrollments = ko.observable(numberOfEnrollments);
        this.changingEnrollment = ko.observable(false);
        this.showIsFull = ko.computed(function () {
            return this.userEnrolled() == false && parseInt(this.numberOfEnrollments()) >= parseInt(this.numberOfPortions());
        }, this);
        this.canEnroll = ko.computed(function () {
            return this.showIsFull() == false && this.userEnrolled() == false;
        }, this);
        this.enrollForLunch = function () {
            this.changingEnrollment(true);
            enrollUser(this.lunchId);
        };
        this.disenrollForLunch = function () {
            this.changingEnrollment(true);
            disenrollUser(this.lunchId);
        };
        this.mealRating = ko.observable(rating);
    };

    //All local view models
    var ViewModels = new Array();

    //Initialization
    $(function () {
        //Initialize enrollments view models
        $(".lunch-info").each(function () {
            //Set up the view model parameters
            lunchId = $(this).attr("lunch-id");
            userEnrolled = $(this).find(".user-enrolled-msg").is(":visible");
            numberOfPortions = $(this).find(".number-of-portions-info").text();
            numberOfEnrollments = $(this).find(".number-of-enrollments-info").text();
            rating = $(this).find(".rating-info").text();
            
            //Add the view model
            var vm = new EnrollmentViewModel(lunchId, userEnrolled, numberOfPortions, numberOfEnrollments, rating);
            ViewModels[lunchId] = vm;
            ko.applyBindings(vm, this);
        });

        $(".rateit").bind('rated', rateMeal);

        $.connection.enrollmentHub.client.lunchInfoUpdated = updateLunchInfo;
        $.connection.hub.start();
    });

    function enrollUser(lunchId) {
        var variationRadioName = "meal-variation-" + lunchId;
        var variation = $("input:radio[name=" + variationRadioName + "]:checked").val();
        $.post('@Url.Action("EnrollUser")', { lunchId: lunchId, variation: variation }, function (result) {
            updateLunch(lunchId, result.userEnrolled, result.numberOfEnrollments, result.numberOfPortions);
        });
    }

    function disenrollUser(lunchId) {
        $.post('@Url.Action("DisenrollUser")', { lunchId: lunchId }, function (result) {
            updateLunch(lunchId, result.userEnrolled, result.numberOfEnrollments, result.numberOfPortions);
        });
    }

    function updateLunch(lunchId, userEnrolled, enrollments, portions) {
        ViewModels[lunchId].userEnrolled(userEnrolled);
        updateLunchInfo(lunchId, enrollments, portions);

        ViewModels[lunchId].changingEnrollment(false);        
    }

    function updateLunchInfo(lunchId, enrollments, portions) {
        ViewModels[lunchId].numberOfPortions(portions);
        ViewModels[lunchId].numberOfEnrollments(enrollments);
    }

    function rateMeal(event, value) {
        parentContainer = $(this).parents('.lunch-info').last();
        mealId = parentContainer.attr('meal-id');
        lunchId = parentContainer.attr('lunch-id');
        $.post('@Url.Action("RateMeal", "Overview")', { mealId: mealId, value: value }, function (data) {
            ViewModels[lunchId].mealRating(data.rating);
        });
    }
</script>

<h2>Anmeldung</h2>

<div style="font-size:18px;font-family:Georgia;text-align:justify;margin-right:10px" class="alert alert-danger">
    Die Mittagessen werden nach dem <b>4. September 2014</b> nur gelegentlich stattfinden!
</div>

@foreach (var lunch in Model.Lunches)
{    
    <div class="meal lunch-info" lunch-id="@lunch.Id" meal-id="@lunch.CookedMealId">
        <div>
            <div>
                <h5 style="float:left">@lunch.LunchDate.ToShortDateString() @lunch.LunchDate.ToShortTimeString()</h5>
                <span class="label label-success user-enrolled-msg" data-bind="visible: userEnrolled" @(Model.EnrolledByUser(lunch) ? null : "style=display:none")>Angemeldet</span>
            </div>

            <div class="meal-img">
                <img alt="@lunch.CookedMeal.Name" src="@lunch.CookedMeal.ImageName"  />
            </div>
            <div class="meal-name">
                <h4>@lunch.CookedMeal.Name</h4>
            </div>
            <div>
                <a href="#modal-@lunch.Id" role="button" class="btn" style="float: right" data-toggle="modal">Optionen</a>
            </div>

            <div class="meal-footer">
                <table>
                    <tr>
                        <td><span style='font-family:Verdana; font-weight:bolder'>Mahlzeiten:</span></td>
                        <td><span class="badge badge-info number-of-portions-info" data-bind="text: numberOfPortions">@lunch.NumberOfPortions</span></td>
                    </tr>
                    <tr>
                        <td><span style='font-family:Verdana; font-weight:bolder'>Angemeldet:</span></td>
                        <td><span class="badge badge-success number-of-enrollments-info" data-bind="text: numberOfEnrollments">@lunch.NumberOfEnrollments</span></td>
                    </tr>
                </table>
                <div style="margin-left:auto;margin-right:auto;margin-top:10px;width:7em">

                    @if (Model.IsAfterDeadline(lunch))
                    {
                        <span class="badge badge-warning"><div class='termin-past-msg'>Termin vergangen</div></span>
                    }
                    else
                    {
                        @Html.Partial("EnrollButton", lunch)
                    }
                </div>
                @if (Model.IsAfterDeadline(lunch) && Model.EnrolledByUser(lunch))
                {
                    <div class="meal-rating">
                        <div style="font-family: Georgia">Wie hat Ihnen die Mahlzeit geschmeckt?</div>
                        <div class="rateit" style="float:left" meal-id="@lunch.CookedMealId" 
                                data-rateit-resetable="false" data-rateit-value="@Model.RatingModel.UserRating(lunch.CookedMealId)" data-rateit-ispreset="true" 
                                data-rateit-step=1 data-rateit-max=10></div>
                    </div>
                }
            </div>

            <div class="modal hide fade in" id="modal-@lunch.Id" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true"
                 style="width: 700px">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h3 id="myModalLabel">@lunch.CookedMeal.Name</h3>
              </div>
              <div class="modal-body">                
                <div style="float: right; width:250px">
                    <h3>Variationen</h3>
                    <div data-bind="visible: canEnroll">                        
                        @Html.RadioButton("meal-variation-" + @lunch.Id, "", true)
                        <span>Mit Allem</span>
                        <br />
                        @if (lunch.CookedMeal.Variations.Count == 0)
                        {
                            <div class="alert alert-info">
                                Es gibt zurzeit keine Variationen für diesen Gericht
                            </div>
                        }
                        @foreach (var variation in lunch.CookedMeal.Variations)
                        {
                            <span title="@(variation.RequiresDeadLine ? "Diese Variation kann nur spätestens 18 Stunden vor dem Mittagessen ausgewählt werden" : "")">
                                @Html.RadioButton("meal-variation-" + @lunch.Id,
                                    variation.Id,
                                    Model.VariationAfterDeadline(lunch, variation) ? new { disabled = "disabled" } : null)
                                <span style="@(Model.VariationAfterDeadline(lunch, variation) ? "color:grey" : "")">@variation.Name</span>
                            </span>
                            <br />
                        }
                    </div>
                    <div data-bind="visible: userEnrolled" class="alert alert-info">
                        Um eine andere Variation auszuwählen, melden Sie sich bitte zuerst ab
                    </div>
                </div>
                <div style="width:400px">
                    <img alt="@lunch.CookedMeal.Name" src="@lunch.CookedMeal.ImageName"  />
                </div>
                <div>
                    <h4>@lunch.CookedMeal.Description</h4>
                </div>
              </div>
              <div class="modal-footer">
                <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>                
                @Html.Partial("EnrollButton", lunch)
              </div>
            </div>
        </div>
    </div>   
}
